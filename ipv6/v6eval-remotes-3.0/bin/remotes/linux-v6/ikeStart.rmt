#!/usr/bin/perl
#
# The Initial Developer of the Original Code is International Business
# Machines Corporation.  Portions created by IBM Corporation are
# Copyright (C) 2003 International Business Machines Corporation.
# All rights reserved.
# 
# Redistribution and use of this software in source and binary forms, with 
# or without modification, are permitted provided that the following 
# conditions and disclaimer are agreed and accepted by the user:
# 
# 1. Redistributions of source code must retain the above copyright 
# notice, this list of conditions and the following disclaimer.
# 
# 2. Redistributions in binary form must reproduce the above copyright 
# notice, this list of conditions and the following disclaimer in the 
# documentation and/or other materials provided with the distribution.
# 
# 3. Neither the names of the copyrighters, the name of the project which 
# is related to this software (hereinafter referred to as "project") nor 
# the names of the contributors may be used to endorse or promote products 
# derived from this software without specific prior written permission.
# 
# 4. No merchantable use may be permitted without prior written 
# notification to the copyrighters. However, using this software for the 
# purpose of testing or evaluating any products including merchantable 
# products may be permitted without any notification to the copyrighters.
# 
# 
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHTERS, THE PROJECT AND 
# CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING 
# BUT NOT LIMITED THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS 
# FOR A PARTICULAR PURPOSE, ARE DISCLAIMED.  IN NO EVENT SHALL THE 
# COPYRIGHTERS, THE PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR 
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) 
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN 
# CONTRACT,STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF 
# THE POSSIBILITY OF SUCH DAMAGE.
#
######################################################################
use V6evalRemote;

rOpen() || goto error;

# set default values
$rOpt_timeout=10 if ! defined($rOpt_timeout);

# check parameters
if (!defined $rOpt_src || !defined $rOpt_dst) {
	print STDERR "src,dst is required\n";
	usage();
	goto error;
}

if ($rOpt_protocol !~ /^isakmp|^ah|^esp|^ah-esp/) {
	print STDERR "protocol is required and must be one of isakmp|ah|esp|ah-esp\n";
	usage();
	goto error;
}

if ($rOpt_protocol =~ /esp/) {
	if (defined $rOpt_esp) {
		if ($rOpt_esp !~ /^encrypt|^authenticate|^encrypt-authenticate/) {
			print STDERR "esp must be one of encrypt|authenticate|encrypt-authenticate\n";
			usage();
			goto error;
		}
	}
}
else {
	if (defined $rOpt_esp) {
		print STDERR "esp can only be specified with a protocol value of esp or ah-esp\n";
		usage();
		goto error;
	}
}

if ($rOpt_authmethod !~ /^psk|^dsssig|^rsasig|^rsaenc|^rsaenc-rev/) {
	print STDERR "authmethod is required and must be one of psk|dsssig|rsasig|rsaenc|rsaenc-rev\n";
	usage();
	goto error;
}

if ($rOpt_authmethod eq "psk" && !defined $rOpt_psk) {
	print STDERR "psk is required when authmethod=psk\n";
	usage();
	goto error;
}

if (($rOpt_authmethod =~ /dss/) || ($rOpt_authmethod =~ /rsa/)) {
	if (!defined $rOpt_pubkey) {
		print STDERR "pubkey is required when authmethod=dsssig|rsasig|rsaenc|rsaenc-rev\n";
		usage();
		goto error;
	}

	if (!defined $rOpt_privkey) {
		print STDERR "pubkey is required when authmethod=dsssig|rsasig|rsaenc|rsaenc-rev\n";
		usage();
		goto error;
	}
}

if ($rOpt_exchange !~ /^main|^aggressive/) {
	print STDERR "exchange is required and must be one of main|aggressive\n";
	usage();
	goto error;
}

if ($rOpt_mode !~ /^transport|^tunnel/) {
	print STDERR "mode is required and must be one of transport|tunnel\n";
	usage();
	goto error;
}

if ($rOpt_mode =~ /tunnel/) {
	if (!defined $rOpt_tsrc || !defined $rOpt_tdst) {
		print STDERR "tsrc,tdst is required when mode=tunnel\n";
		usage();
		goto error;
	}
}

if (defined $rOpt_pfs && $rOpt_pfs !~ /^yes|^no/) {
	print STDERR "pfs must be one of yes|no\n";
	usage();
	goto error;
}

#----------------------------------------------------------------------

my $configFile     = "/tmp/tahi-ike-config";
my $configFilePSK  = "$configFile-psk";
my $configCertPath = "/tmp";
my $ike            = "racoon";
my $setkey         = "setkey";

rLogin($rOpt_timeout) || goto error;

# Configure IKE
ike_config() || goto error;

# Start IKE
ike_start() || goto error;

# Create a connection
ike_connection() || goto error;

# Start listening
ike_listen() || goto error;

# Get status
ike_status() || goto error;

rLogout($rOpt_timeout) || goto error;

rClose();
exit($V6evalRemote::exitPass);

error:
	rClose();
	exit($V6evalRemote::exitFail);

nosupport:
	rClose();
	exit($V6evalRemote::exitNS);


########################################################################
sub ike_config() {
	if ($rOpt_authmethod eq "psk") {
		$configFile = psk_config();
	}

	elsif ($rOpt_authmethod eq "rsa") {
		$configFile = rsa_config();
	}

	else {
		return 0;
	}

	return 1;
}

########################################################################
sub ike_start() {
	my $cmd = "$ike -f $configFile";
	rCommand($cmd, $rOpt_timeout) || return 0;

	return 1;
}

########################################################################
sub ike_connection() {
	my $setkey_cmd = "spdadd $rOpt_src $rOpt_dst any -P in ipsec";
	
	if ($rOpt_protocol =~ /isakmp/) {
		# Set "dummy" phase 2 values
		$setkey_cmd .= " ah/$rOpt_mode/";
		$setkey_cmd .= ($rOpt_mode eq "transport") ? "/" : "$rOpt_tsrc-$rOpt_tdst/";
		$setkey_cmd .= "require";
	}
	if ($rOpt_protocol =~ /esp/) {
		$setkey_cmd .= " esp/$rOpt_mode/";
		$setkey_cmd .= ($rOpt_mode eq "transport") ? "/" : "$rOpt_tsrc-$rOpt_tdst/";
		$setkey_cmd .= "require";
	}
	if ($rOpt_protocol =~ /ah/) {
		$setkey_cmd .= " ah/$rOpt_mode/";
		$setkey_cmd .= ($rOpt_mode eq "transport") ? "/" : "$rOpt_tsrc-$rOpt_tdst/";
		$setkey_cmd .= "require";
	}
	$setkey_cmd .= ";";

	$setkey_cmd .= "spdadd $rOpt_dst $rOpt_src any -P out ipsec";
	if ($rOpt_protocol =~ /isakmp/) {
		# Set "dummy" phase 2 values
		$setkey_cmd .= " ah/$rOpt_mode/";
		$setkey_cmd .= ($rOpt_mode eq "transport") ? "/" : "$rOpt_tdst-$rOpt_tsrc/";
		$setkey_cmd .= "require";
	}
	if ($rOpt_protocol =~ /esp/) {
		$setkey_cmd .= " esp/$rOpt_mode/";
		$setkey_cmd .= ($rOpt_mode eq "transport") ? "/" : "$rOpt_tdst-$rOpt_tsrc/";
		$setkey_cmd .= "require";
	}
	if ($rOpt_protocol =~ /ah/) {
		$setkey_cmd .= " ah/$rOpt_mode/";
		$setkey_cmd .= ($rOpt_mode eq "transport") ? "/" : "$rOpt_tdst-$rOpt_tsrc/";
		$setkey_cmd .= "require";
	}
	$setkey_cmd .= ";";
	
	my $cmd = "/bin/echo \'$setkey_cmd\' | setkey -c";
	rCommand($cmd, $rOpt_timeout) || return 0;

	return 1;
}

########################################################################
sub ike_listen() {

	return 1;
}

########################################################################
sub ike_status() {
	my $cmd = "/bin/echo \'spddump;\' | setkey -c";
	rCommand($cmd, $rOpt_timeout) || return 0;

	return 1;
}

########################################################################
sub psk_config() {
	my $xchng  = ($rOpt_exchange eq "main") ? "main" : "agg";
	my $pfs    = ($rOpt_pfs eq "yes") ? "pfs_yes" : "pfs_no";

	# Select the IKE configuration file
	my $configName = "$configFile-psk-$xchng-$pfs";

	return $configName;
}

########################################################################
sub rsa_config() {
	my $xchng  = ($rOpt_exchange eq "main") ? "main" : "agg";
	my $pfs    = ($rOpt_pfs eq "yes") ? "pfs_group 1;" : "";

	# Create the IKE configuration file
	my $configName = "$configFile-rsa-$xchng-$pfs";

	return 1;
}

########################################################################
sub usage() {
	print STDERR "ikeStart.rmt parameters\n";
	print STDERR "\t parameters:\n";
	print STDERR "\t\t src=source address\n";
	print STDERR "\t\t dst=destination address\n";
	print STDERR "\t\t protocol={isakmp|ah|esp|ah-esp}\n";
	print STDERR "\t\t\t isakmp - Establish ISAKMP SA only\n";
	print STDERR "\t\t\t ah     - Establish ISAKMP SA and IPSec AH SA\n";
	print STDERR "\t\t\t esp    - Establish ISAKMP SA and IPSec ESP SA\n";
	print STDERR "\t\t\t ah-esp - Establish ISAKMP SA and IPSec AH/ESP SA\n";
	print STDERR "\t\t [esp={encrypt|authenticate|encrypt-authenticate}]\n";
	print STDERR "\t\t    (esp is only valid when protocol=esp|ah-esp)\n";
	print STDERR "\t\t\t encrypt              - ESP Encryption only\n";
	print STDERR "\t\t\t authenticate         - ESP Authentication only\n";
	print STDERR "\t\t\t encrypt-authenticate - ESP Encryption and Authentication\n";
	print STDERR "\t\t authmethod={psk|dsssig|rsasig|rsaenc|rsaenc-rev}\n";
	print STDERR "\t\t\t psk        - Pre-shared Key Authentication\n";
	print STDERR "\t\t\t dsssig     - DSS Authentication\n";
	print STDERR "\t\t\t rsasig     - RSA Signature Authentication\n";
	print STDERR "\t\t\t rsaenc     - RSA Public Key Encryption Authentication\n";
	print STDERR "\t\t\t rsaenc-rev - Revised RSA Public Key Encryption Authentication\n";
	print STDERR "\t\t {psk=shared secret |\n";
	print STDERR "\t\t  pubkey=public key\n";
	print STDERR "\t\t  privkey=private key}\n";
	print STDERR "\t\t\t psk     - Pre-shared Key secret\n";
	print STDERR "\t\t\t pubkey  - Public Key  (used for dsssig|rsasig|rsaenc|rsaenc-rev)\n";
	print STDERR "\t\t\t privkey - Private Key (used for dsssig|rsasig|rsaenc|rsaenc-rev)\n";
	print STDERR "\t\t exchange={main|aggressive}\n";
	print STDERR "\t\t\t main       - Main Mode Phase 1 exchange\n";
	print STDERR "\t\t\t aggressive - Aggressive Mode Phase 1 exchange\n";
	print STDERR "\t\t mode={transport|tunnel}\n";
	print STDERR "\t\t\t transport - Transport Mode\n";
	print STDERR "\t\t\t tunnel    - Tunnel Mode\n";
	print STDERR "\t\t tsrc=tunnel source address\n";
	print STDERR "\t\t tdst=tunnel destination address\n";
	print STDERR "\t\t    (tsrc/tdst are only valid when mode=tunnel)\n";
	print STDERR "\t\t [pfs={yes|no}]\n";
	print STDERR "\t\t\t yes - Use Perfect Forward Secrecy\n";
	print STDERR "\t\t\t no  - Do not use Perfect Forward Secrecy (default)\n";
}

########################################################################
