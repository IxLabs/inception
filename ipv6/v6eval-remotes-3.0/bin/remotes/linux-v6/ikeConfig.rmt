#!/usr/bin/perl
#
# The Initial Developer of the Original Code is International Business
# Machines Corporation.  Portions created by IBM Corporation are
# Copyright (C) 2003 International Business Machines Corporation.
# All rights reserved.
# 
# Redistribution and use of this software in source and binary forms, with 
# or without modification, are permitted provided that the following 
# conditions and disclaimer are agreed and accepted by the user:
# 
# 1. Redistributions of source code must retain the above copyright 
# notice, this list of conditions and the following disclaimer.
# 
# 2. Redistributions in binary form must reproduce the above copyright 
# notice, this list of conditions and the following disclaimer in the 
# documentation and/or other materials provided with the distribution.
# 
# 3. Neither the names of the copyrighters, the name of the project which 
# is related to this software (hereinafter referred to as "project") nor 
# the names of the contributors may be used to endorse or promote products 
# derived from this software without specific prior written permission.
# 
# 4. No merchantable use may be permitted without prior written 
# notification to the copyrighters. However, using this software for the 
# purpose of testing or evaluating any products including merchantable 
# products may be permitted without any notification to the copyrighters.
# 
# 
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHTERS, THE PROJECT AND 
# CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING 
# BUT NOT LIMITED THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS 
# FOR A PARTICULAR PURPOSE, ARE DISCLAIMED.  IN NO EVENT SHALL THE 
# COPYRIGHTERS, THE PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR 
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) 
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN 
# CONTRACT,STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF 
# THE POSSIBILITY OF SUCH DAMAGE.
#
######################################################################
use V6evalRemote;

rOpen() || goto error;

# set default values
$rOpt_timeout=10 if ! defined($rOpt_timeout);

# check parameters
if (!defined $rOpt_src || !defined $rOpt_dst) {
	print STDERR "src,dst is required\n";
	usage();
	goto error;
}

if ($rOpt_mode !~ /^transport|^tunnel/) {
	print STDERR "mode is required and must be one of transport|tunnel\n";
	usage();
	goto error;
}

if ($rOpt_mode =~ /tunnel/) {
	if (!defined $rOpt_tsrc || !defined $rOpt_tdst) {
		print STDERR "tsrc,tdst is required when mode=tunnel\n";
		usage();
		goto error;
	}
}

if (!defined $rOpt_psk) {
	print STDERR "psk is required for generating configurations\n";
	usage();
	goto error;
}

#----------------------------------------------------------------------

my $configFile     = "/tmp/tahi-ike-config";
my $configFilePSK  = "$configFile-psk";
my $configCertPath = "/tmp";

rLogin($rOpt_timeout) || goto error;

# Generate IKE configurations
gen_configs() || goto error;

rLogout($rOpt_timeout) || goto error;

rClose();
exit($V6evalRemote::exitPass);

error:
	rClose();
	exit($V6evalRemote::exitFail);

nosupport:
	rClose();
	exit($V6evalRemote::exitNS);


########################################################################
sub gen_configs() {
	my $configName;
	my $listenAddr = ($rOpt_mode eq "transport") ? $rOpt_dst : $rOpt_tdst;
	my $mainMode   = "main";
	my $aggMode    = "aggressive";
	my $pfsYes     = "pfs_group 1;";
	my $pfsNo      = "";

	$configName = "$configFile-psk-main-pfs_no";
	gen_psk_config($configName, $listenAddr, $mainMode, $pfsNo);

	$configName = "$configFile-psk-main-pfs_yes";
	gen_psk_config($configName, $listenAddr, $mainMode, $pfsYes);

	$configName = "$configFile-psk-agg-pfs_no";
	gen_psk_config($configName, $listenAddr, $aggMode,  $pfsNo);

	$configName = "$configFile-psk-agg-pfs_yes";
	gen_psk_config($configName, $listenAddr, $aggMode,  $pfsYes);

	my $srcAddr = ($rOpt_mode eq "transport") ? $rOpt_src : $rOpt_tsrc;
	gen_psk_secret($srcAddr);
	
	return 1;
}

########################################################################
sub gen_psk_config($$$$) { my (
	$configName,
	$listenAddr,
	$exchangeMode,
	$pfs,
	) = @_;

	# Create the IKE configuration file
	my $cmd;
	$cmd  = "# Racoon PreShared Key Configuation\\n";
	$cmd .= "path pre_shared_key \"$configFilePSK\";\\n";
	$cmd .= "padding\\n";
	$cmd .= "{\\n";
	$cmd .= " randomize off;\\n";
	$cmd .= " strict_check on;\\n";
	$cmd .= " exclusive_tail on;\\n";
	$cmd .= "}\\n";
	$cmd .= "timer\\n";
	$cmd .= "{\\n";
	$cmd .= " counter 5;\\n";
	$cmd .= " interval 30 sec;\\n";
	$cmd .= " persend 1;\\n";
	$cmd .= " phase1 60 sec;\\n";
	$cmd .= " phase2 60 sec;\\n";
	$cmd .= "}\\n";
	$cmd .= "listen\\n";
	$cmd .= "{\\n";
	$cmd .= " isakmp $listenAddr;\\n";
	$cmd .= "}\\n";
	$cmd .= "remote anonymous\\n";
	$cmd .= "{\\n";
	$cmd .= " exchange_mode $exchangeMode;\\n";
	$cmd .= " doi ipsec_doi;\\n";
	$cmd .= " situation identity_only;\\n";
	$cmd .= " my_identifier address;\\n";
	$cmd .= " send_cert off;\\n";
	$cmd .= " send_cr off;\\n";
	if ($exchangeMode eq "main") {
		# Only allow dh group 2 if in main mode
		# Aggressive mode requires all the same dh group
		$cmd .= " proposal\\n";
		$cmd .= " {\\n";
		$cmd .= "  encryption_algorithm 3des;\\n";
		$cmd .= "  hash_algorithm sha1;\\n";
		$cmd .= "  authentication_method pre_shared_key;\\n";
		$cmd .= "  dh_group 2;\\n";
		$cmd .= " }\\n";
		$cmd .= " proposal\\n";
		$cmd .= " {\\n";
		$cmd .= "  encryption_algorithm 3des;\\n";
		$cmd .= "  hash_algorithm md5;\\n";
		$cmd .= "  authentication_method pre_shared_key;\\n";
		$cmd .= "  dh_group 2;\\n";
		$cmd .= " }\\n";
	}
	$cmd .= " proposal\\n";
	$cmd .= " {\\n";
	$cmd .= "  encryption_algorithm 3des;\\n";
	$cmd .= "  hash_algorithm sha1;\\n";
	$cmd .= "  authentication_method pre_shared_key;\\n";
	$cmd .= "  dh_group 1;\\n";
	$cmd .= " }\\n";
	$cmd .= " proposal\\n";
	$cmd .= " {\\n";
	$cmd .= "  encryption_algorithm 3des;\\n";
	$cmd .= "  hash_algorithm md5;\\n";
	$cmd .= "  authentication_method pre_shared_key;\\n";
	$cmd .= "  dh_group 1;\\n";
	$cmd .= " }\\n";
	if ($exchangeMode eq "main") {
		# Only allow dh group 2 if in main mode
		# Aggressive mode requires all the same dh group
		$cmd .= " proposal\\n";
		$cmd .= " {\\n";
		$cmd .= "  encryption_algorithm des;\\n";
		$cmd .= "  hash_algorithm sha1;\\n";
		$cmd .= "  authentication_method pre_shared_key;\\n";
		$cmd .= "  dh_group 2;\\n";
		$cmd .= " }\\n";
		$cmd .= " proposal\\n";
		$cmd .= " {\\n";
		$cmd .= "  encryption_algorithm des;\\n";
		$cmd .= "  hash_algorithm md5;\\n";
		$cmd .= "  authentication_method pre_shared_key;\\n";
		$cmd .= "  dh_group 2;\\n";
		$cmd .= " }\\n";
	}
	$cmd .= " proposal\\n";
	$cmd .= " {\\n";
	$cmd .= "  encryption_algorithm des;\\n";
	$cmd .= "  hash_algorithm sha1;\\n";
	$cmd .= "  authentication_method pre_shared_key;\\n";
	$cmd .= "  dh_group 1;\\n";
	$cmd .= " }\\n";
	$cmd .= " proposal\\n";
	$cmd .= " {\\n";
	$cmd .= "  encryption_algorithm des;\\n";
	$cmd .= "  hash_algorithm md5;\\n";
	$cmd .= "  authentication_method pre_shared_key;\\n";
	$cmd .= "  dh_group 1;\\n";
	$cmd .= " }\\n";
	$cmd .= "}\\n";
	$cmd .= "sainfo anonymous\\n";
	$cmd .= "{\\n";
	$cmd .= " $pfs\\n";
	$cmd .= " encryption_algorithm des,3des,null_enc;\\n";
	$cmd .= " authentication_algorithm hmac_md5,hmac_sha1,non_auth;\\n";
	$cmd .= " compression_algorithm deflate;\\n";
	$cmd .= "}";
	rCommand("/bin/echo -e \'$cmd\' >$configName", $rOpt_timeout) || return 0;

	return 1;
}

########################################################################
sub gen_psk_secret($) { my (
	$src,
	) = @_;
	
	my $secret = $rOpt_psk;
	
	# Create the IKE psk file
	$cmd .= "# Preshared Secret\\n";
	$cmd .= "$src $secret";
	rCommand("/bin/echo -e \'$cmd\' >$configFilePSK", $rOpt_timeout) || return 0;
	rCommand("chmod 600 $configFilePSK", $rOpt_timeout) || return 0;

	return 1;
}

########################################################################
sub gen_rsa_config($$$$) { my (
	$configName,
	$listenAddr,
	$exchangeMode,
	$pfs,
	) = @_;

	# Create the IKE configuration file
	$cmd .= "# Racoon RSA Configuration\\n";
	$cmd .= "path certificate $configCertPath;\\n";
	$cmd .= "padding\\n";
	$cmd .= "{\\n";
	$cmd .= " randomize off;\\n";
	$cmd .= " strict_check on;\\n";
	$cmd .= " exclusive_tail on;\\n";
	$cmd .= "}\\n";
	$cmd .= "timer\\n";
	$cmd .= "{\\n";
	$cmd .= " counter 5;\\n";
	$cmd .= " interval 30 sec;\\n";
	$cmd .= " persend 1;\\n";
	$cmd .= " phase1 60 sec;\\n";
	$cmd .= " phase2 60 sec;\\n";
	$cmd .= "}\\n";
	$cmd .= "listen\\n";
	$cmd .= "{\\n";
	$cmd .= " isakmp $listenAddr;\\n";
	$cmd .= "}\\n";
	$cmd .= "remote anonymous\\n";
	$cmd .= "{\\n";
	$cmd .= " exchange_mode $exchangeMode;\\n";
	$cmd .= " doi ipsec_doi;\\n";
	$cmd .= " situation identity_only;\\n";
	$cmd .= " my_identifier address;\\n";
	$cmd .= " send_cert off;\\n";
	$cmd .= " send_cr off;\\n";
	if ($exchangeMode eq "main") {
		# Only allow dh group 2 if in main mode
		# Aggressive mode requires all the same dh group
		$cmd .= " proposal\\n";
		$cmd .= " {\\n";
		$cmd .= "  encryption_algorithm 3des;\\n";
		$cmd .= "  hash_algorithm sha1;\\n";
		$cmd .= "  authentication_method rsasig;\\n";
		$cmd .= "  dh_group 2;\\n";
		$cmd .= " }\\n";
		$cmd .= " proposal\\n";
		$cmd .= " {\\n";
		$cmd .= "  encryption_algorithm 3des;\\n";
		$cmd .= "  hash_algorithm md5;\\n";
		$cmd .= "  authentication_method rsasig;\\n";
		$cmd .= "  dh_group 2;\\n";
		$cmd .= " }\\n";
	}
	$cmd .= " proposal\\n";
	$cmd .= " {\\n";
	$cmd .= "  encryption_algorithm 3des;\\n";
	$cmd .= "  hash_algorithm sha1;\\n";
	$cmd .= "  authentication_method rsasig;\\n";
	$cmd .= "  dh_group 1;\\n";
	$cmd .= " }\\n";
	$cmd .= " proposal\\n";
	$cmd .= " {\\n";
	$cmd .= "  encryption_algorithm 3des;\\n";
	$cmd .= "  hash_algorithm md5;\\n";
	$cmd .= "  authentication_method rsasig;\\n";
	$cmd .= "  dh_group 1;\\n";
	$cmd .= " }\\n";
	if ($exchangeMode eq "main") {
		# Only allow dh group 2 if in main mode
		# Aggressive mode requires all the same dh group
		$cmd .= " proposal\\n";
		$cmd .= " {\\n";
		$cmd .= "  encryption_algorithm des;\\n";
		$cmd .= "  hash_algorithm sha1;\\n";
		$cmd .= "  authentication_method rsasig;\\n";
		$cmd .= "  dh_group 2;\\n";
		$cmd .= " }\\n";
		$cmd .= " proposal\\n";
		$cmd .= " {\\n";
		$cmd .= "  encryption_algorithm des;\\n";
		$cmd .= "  hash_algorithm md5;\\n";
		$cmd .= "  authentication_method rsasig;\\n";
		$cmd .= "  dh_group 2;\\n";
		$cmd .= " }\\n";
	}
	$cmd .= " proposal\\n";
	$cmd .= " {\\n";
	$cmd .= "  encryption_algorithm des;\\n";
	$cmd .= "  hash_algorithm sha1;\\n";
	$cmd .= "  authentication_method rsasig;\\n";
	$cmd .= "  dh_group 1;\\n";
	$cmd .= " }\\n";
	$cmd .= " proposal\\n";
	$cmd .= " {\\n";
	$cmd .= "  encryption_algorithm des;\\n";
	$cmd .= "  hash_algorithm md5;\\n";
	$cmd .= "  authentication_method rsasig;\\n";
	$cmd .= "  dh_group 1;\\n";
	$cmd .= " }\\n";
	$cmd .= "}\\n";
	$cmd .= "sainfo anonymous\\n";
	$cmd .= "{\\n";
	$cmd .= " $pfs\\n";
	$cmd .= " encryption_algorithm des,3des,null_enc;\\n";
	$cmd .= " authentication_algorithm hmac_md5,hmac_sha1,non_auth;\\n";
	$cmd .= " compression_algorithm deflate;\\n";
	$cmd .= "}";
	rCommand("/bin/echo -e \'$cmd\' >$configName", $rOpt_timeout) || return 0;

	return 1;
}

########################################################################
sub usage() {
	print STDERR "ikeConfig.rmt parameters\n";
	print STDERR "\t parameters:\n";
	print STDERR "\t\t src=source address\n";
	print STDERR "\t\t dst=destination address\n";
	print STDERR "\t\t mode={transport|tunnel}\n";
	print STDERR "\t\t\t transport - Transport Mode\n";
	print STDERR "\t\t\t tunnel    - Tunnel Mode\n";
	print STDERR "\t\t tsrc=tunnel source address\n";
	print STDERR "\t\t tdst=tunnel destination address\n";
	print STDERR "\t\t    (tsrc/tdst are only valid when mode=tunnel)\n";
	print STDERR "\t\t psk=shared secret\n";
	print STDERR "\t\t\t psk     - Pre-shared Key secret\n";
}

########################################################################
