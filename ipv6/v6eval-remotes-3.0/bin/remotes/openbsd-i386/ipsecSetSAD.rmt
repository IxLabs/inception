#!/usr/bin/perl
#
# Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004, 2005 Yokogawa Electric Corporation,
# YDC Corporation, IPA (Information-technology Promotion Agency, Japan).
# All rights reserved.
# 
# Redistribution and use of this software in source and binary forms, with 
# or without modification, are permitted provided that the following 
# conditions and disclaimer are agreed and accepted by the user:
# 
# 1. Redistributions of source code must retain the above copyright 
# notice, this list of conditions and the following disclaimer.
# 
# 2. Redistributions in binary form must reproduce the above copyright 
# notice, this list of conditions and the following disclaimer in the 
# documentation and/or other materials provided with the distribution.
# 
# 3. Neither the names of the copyrighters, the name of the project which 
# is related to this software (hereinafter referred to as "project") nor 
# the names of the contributors may be used to endorse or promote products 
# derived from this software without specific prior written permission.
# 
# 4. No merchantable use may be permitted without prior written 
# notification to the copyrighters. However, using this software for the 
# purpose of testing or evaluating any products including merchantable 
# products may be permitted without any notification to the copyrighters.
# 
# 
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHTERS, THE PROJECT AND 
# CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING 
# BUT NOT LIMITED THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS 
# FOR A PARTICULAR PURPOSE, ARE DISCLAIMED.  IN NO EVENT SHALL THE 
# COPYRIGHTERS, THE PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR 
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) 
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN 
# CONTRACT,STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF 
# THE POSSIBILITY OF SUCH DAMAGE.
#
# $TAHI: v6eval/bin/remotes/openbsd-i386/ipsecSetSAD.rmt,v 1.1 2001/11/15 07:21:12 masaxmasa Exp $
#
########################################################################
use V6evalRemote;

rOpen() || goto error;

# set default values

$rOpt_timeout=30 if ! defined($rOpt_timeout);

# check parameters

if ($rOpt_src eq undef || $rOpt_dst eq undef || $rOpt_spi eq undef) {
    print STDERR "src,dst,spi is required\n";
    usage();
    goto error;
}
if ($rOpt_mode !~ /transport|tunnel/) {
    print STDERR "mode must be one of transport|tunnel\n";
    usage();
    goto error;
}
if ($rOpt_protocol !~ /ah|esp|ah-esp/) {
    print STDERR "protocol must be one of ah|esp|ah-esp\n";
    usage();
    goto error;
}

#----------------------------------------------------------------------

$ipseccmd = "/sbin/ipsecadm";

if ($rOpt_protocol eq "ah") {
    $cmd .= add_ah_openbsd();
}
if ($rOpt_protocol eq "esp") {
    $cmd .= add_esp_openbsd();
}
if ($rOpt_protocol eq "ah-esp") {
    $cmd .= add_ah_esp_openbsd();
}

if($cmd eq $V6evalRemote::exitNS) {
    goto no_support;
};

rLogin($rOpt_timeout) || goto error;
rCommand($cmd , $rOpt_timeout) || goto error;
rLogout($rOpt_timeout) || goto error;

rClose();
exit($V6evalRemote::exitPass);

error:
    rClose();
    exit($V6evalRemote::exitFail);

no_support:
    rClose();
    exit($V6evalRemote::exitNS);

########################################################################
# openbsd
########################################################################

#-----------------------------------------------------------------------
# add_ah_openbsd()
#	set AH's SA
#-----------------------------------------------------------------------
sub add_ah_openbsd()
{
    my ($cmd, $hex);

    #key exchange to hex
    $hex = pack("a*", unpack("H*", $rOpt_aalgokey));

    # change algorythm name depended KAME to OpenBSD style.
    if($rOpt_aalgo =~ /hmac-/s) {
	$rOpt_aalgo =~ s/hmac-(.*)/$1/;
    }

    $cmd = "$ipseccmd new ah -src $rOpt_src -dst $rOpt_dst -spi $rOpt_spi -auth $rOpt_aalgo -key \"$hex\"";

    if($rOpt_mode eq "tunnel") {
	$cmd .= " -forcetunnel";
    };

    $cmd .= "\r";

    return $cmd;
}

#-----------------------------------------------------------------------
# add_esp_openbsd()
#	set ESP's SA
#	"$rOpt_padding" was not used in all IPsec .seq files.
#	So, not implemented handling "$rOpt_padding".
#	OpenBSD don't support null encryption.
#-----------------------------------------------------------------------
sub add_esp_openbsd()
{
    my ($cmd, $hex_e, $hex_a);

    #keys exchange to hex
    $hex_e = pack("a*", unpack("H*", $rOpt_ealgokey));
    $hex_a = pack("a*", unpack("H*", $rOpt_eauthkey));

    # OpenBSD don't support null encryption.
    if($rOpt_ealgo eq "null") {
	return($V6evalRemote::exitNS);
    }
    else {
	# change algorythm name depended KAME to OpenBSD style.
	if($rOpt_ealgo =~ /-cbc/s) {
	    $rOpt_ealgo =~ s/(.*)-cbc/$1/;
	};
    };

    $cmd = "$ipseccmd new esp -src $rOpt_src -dst $rOpt_dst -spi $rOpt_spi -enc $rOpt_ealgo -key \"$hex_e\"";

    if($rOpt_eauth ne undef && $rOpt_eauthkey ne undef) {

	# change algorythm name depended KAME to OpenBSD style.
	if($rOpt_eauth =~ /hmac-/s) {
	    $rOpt_eauth =~ s/hmac-(.*)/$1/;
	    $cmd .= " -auth $rOpt_eauth -authkey \"$hex_a\"";
	}
	else {
	    return($V6evalRemote::exitNS);
	};
    };

    if($rOpt_mode eq "tunnel") {
	$cmd .= " -forcetunnel";
    };

    $cmd .= "\r";

    return $cmd;
}

#-----------------------------------------------------------------------
# add_ah_esp_openbsd()
#	set ESP and AH SAs
#	to IPsec with AH and ESP in OpenBSD
#		- set each SAs
#		- grouping two SAs
#	*** THIS IS NOT TEST YET ***
#	*** NOW THIS ROUTING IS NOT REACHED ***
#-----------------------------------------------------------------------
sub add_ah_esp_openbsd()
{
    my ($cmd);
    $cmd = add_esp_openbsd();
    $cmd .= add_ah_openbsd();
    $cmd .= "$ipseccmd group -proto esp -dst $rOpt_dst -spi $rOpt_spi -proto2 ah -dst $rOpt_dst -spi $rOpt_spi";

    $cmd .= "\r";

    return $cmd;
};

########################################################################
sub usage()
{
    print STDERR "ipsecSetSAD.rmt [parameters]\n";
    print STDERR "parameters:\n";
    print STDERR "src=source address\n";
    print STDERR "dst=destination address\n";
    print STDERR "spi=SPI\n";
    print STDERR "mode={transport|tunnel}\n";
    print STDERR "protocol={ah|esp|ah-esp}\n";
    print STDERR "aalgo={hmac-md5|hmac-sha1}\n";
    print STDERR "aalgokey=AH algorithm key\n";
    print STDERR "ealgo={des-cbc|3des-cbc}\n";
    print STDERR "ealgokey=ESP algorithm key\n";
    print STDERR "eauth={hmac-md5|hmac-sha1}\n";
    print STDERR "eauthkey=ESP authentication key\n";
    print STDERR "padding=NOT SUPPORT\n";
    print STDERR "nsrc=source VPN site address\n";
    print STDERR "ndst=destination VPN site address\n";
}

########################################################################
