#!/usr/bin/perl
#
# Copyright (C) 1999, 2000, 2001, 2002, 2003 Yokogawa Electric Corporation,
# YDC Corporation, IPA (Information-technology Promotion Agency, Japan),
# Copyright (C) IBM Corporation 2003.
# All rights reserved.
# 
# Redistribution and use of this software in source and binary forms, with 
# or without modification, are permitted provided that the following 
# conditions and disclaimer are agreed and accepted by the user:
# 
# 1. Redistributions of source code must retain the above copyright 
# notice, this list of conditions and the following disclaimer.
# 
# 2. Redistributions in binary form must reproduce the above copyright 
# notice, this list of conditions and the following disclaimer in the 
# documentation and/or other materials provided with the distribution.
# 
# 3. Neither the names of the copyrighters, the name of the project which 
# is related to this software (hereinafter referred to as "project") nor 
# the names of the contributors may be used to endorse or promote products 
# derived from this software without specific prior written permission.
# 
# 4. No merchantable use may be permitted without prior written 
# notification to the copyrighters. However, using this software for the 
# purpose of testing or evaluating any products including merchantable 
# products may be permitted without any notification to the copyrighters.
# 
# 
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHTERS, THE PROJECT AND 
# CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING 
# BUT NOT LIMITED THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS 
# FOR A PARTICULAR PURPOSE, ARE DISCLAIMED.  IN NO EVENT SHALL THE 
# COPYRIGHTERS, THE PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR 
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) 
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN 
# CONTRACT,STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF 
# THE POSSIBILITY OF SUCH DAMAGE.
#
#    Author: Kazuo Hiekata <hiekata@yamato.ibm.com>
#
########################################################################
use V6evalRemote;

my($cmd);

rOpen() || goto error;

# pfkey command
$PFKEY="/usr/sbin/pfkey";

# set default values

$rOpt_timeout=30 if ! defined($rOpt_timeout);

$rOpt_upperspec = "any" if ! defined($rOpt_upperspec);

$rOpt_policy = "ipsec" if ! defined($rOpt_policy);

$rOpt_level = "require" if ! defined($rOpt_level);

$rOpt_spi = "any" if ! defined($rOpt_spi);

# check parameters

if (!defined($rOpt_src) || !defined($rOpt_dst)) {
    print STDERR "src,dst is required\n";
    usage();
    goto error;
}
if ($rOpt_policy !~ /ipsec|none|discard/) {
    print STDERR "policy must be one of ipsec|none|discard\n";
    usage();
    goto error;
}

if ($rOpt_policy eq "ipsec") {
    if ($rOpt_mode !~ /transport|tunnel/) {
	print STDERR "mode must be one of transport|tunnel\n";
	usage();
	goto error;
    }
    if ($rOpt_protocol !~ /ah|esp|ah-esp/) {
	print STDERR "protocol must be one of ah|esp|ah-esp\n";
	usage();
	goto error;
    }
    if ($rOpt_upperspec !~ /any/) {
	print STDERR "upperspec must be any\n";

	usage();
	goto error;
    }
    if ($rOpt_direction !~ /in|out/) {
	print STDERR "direction must be one of in|out\n";
	usage();
	goto error;
    }
    if ($rOpt_level ne undef ) {
        print STDERR "level is specified. I ignore it \n";
    }
    if ($rOpt_mode eq "transport") {
	if ($rOpt_tsrc ne undef && $rOpt_tdst ne undef) {
	    print STDERR "tsrc,tdst is defined in transport mode\n";
	    usage();
	    goto error;
	}
    }
    if ($rOpt_mode eq "tunnel") {
	    if (!defined($rOpt_tsrc) || !defined($rOpt_tdst ne undef)) {
            print STDERR "tsrc,tdst is required in tunnel mode\n";
            usage();
            goto error;
        }
    }
}



#----------------------------------------------------------------------

rLogin($rOpt_timeout) || goto error;

if ($rOpt_mode eq "tunnel") {
    # for USAGI
    my $tsrc = $rOpt_tsrc;
    my $tdst = $rOpt_tdst;
    my $dst = $rOpt_dst;
    if ($rOpt_direction eq "in") {
       $tsrc = $rOpt_tdst;
       $tdst = $rOpt_tsrc;
       $dst = $rOpt_src;
    } 
	
    # configure Tunnel device and Tunnel
    $cmd = "
    /sbin/lsmod | /bin/grep ipv6_tunnel;
    if [ 0 != \$? ]; then
        /sbin/modprobe ipv6_tunnel;
    fi;
    export check=0;
    for i in 0 1 2 3 4 5 6 7 8 9; do
        /sbin/ifconfig tnl\$i;
        if [ 0 != \$? ]; then
            if [ 0 == \$check ]; then
# SP2a?
#                /usr/sbin/ipv6tunnel add tnl\$i --tunnel-local-packets encaplimit 0 remote $tdst local $tsrc;
                /usr/sbin/ipv6tunnel add tnl\$i --allow-local-packets encaplimit 0 remote $tdst local $tsrc;
                /sbin/ifconfig tnl\$i up;
                /sbin/ifconfig tnl\$i add fe80::1\$i;
                /sbin/route del --inet6 $dst;
                /sbin/route add --inet6 $dst dev tnl\$i;
                check=1;
            fi;
        fi;
    done;";

    rCommand($cmd, $rOpt_timeout);
}

if ($rOpt_policy eq "ipsec") {

    if ($rOpt_protocol eq "ah") {
		$cmd = "$PFKEY -A sp -S $rOpt_spi -T ah -s $rOpt_src -d $rOpt_dst";
	}
	
    if (($rOpt_protocol eq "esp") ||($rOpt_protocol eq "esp-auth")) {
		$cmd = "$PFKEY -A sp -S $rOpt_spi -T esp -s $rOpt_src -d $rOpt_dst";
    }

    if ($rOpt_protocol eq "ah-esp") {
		$cmd = "$PFKEY -A sp -S $rOpt_spi -T ah -s $rOpt_src -d $rOpt_dst";
		if ($rOpt_mode eq "transport"){
			$cmd .= " --sad $rOpt_dst";
		} elsif ($rOpt_mode eq "tunnel"){
			$cmd .= " --tunnel --sad $rOpt_tdst";
		}
		rCommand($cmd, $rOpt_timeout);

		$cmd = "$PFKEY -A sp -S $rOpt_spi -T esp -s $rOpt_src -d $rOpt_dst";
    }
    
	if ($rOpt_mode eq "transport"){
		$cmd .= " --sad $rOpt_dst";
	} elsif ($rOpt_mode eq "tunnel"){
		$cmd .= " --tunnel --sad $rOpt_tdst";
	}
	
    rCommand($cmd, $rOpt_timeout);
}

if ($rOpt_policy eq "none") {
	$cmd = "$PFKEY -A sp -s $rOpt_src -d $rOpt_dst --policy bypass";
	rCommand($cmd, $rOpt_timeout);
}
if ($rOpt_policy eq "discard") {
	$cmd = "$PFKEY -A sp -s $rOpt_src -d $rOpt_dst --policy discard";
	rCommand($cmd, $rOpt_timeout);
}

rCommand("$PFKEY -L", $ropt_timeout);

rLogout($rOpt_timeout) || goto error;

rClose();
exit($V6evalRemote::exitPass);

error:
    rClose();
    exit($V6evalRemote::exitFail);

########################################################################
sub usage()
{
    print STDERR "ipsecSetSPD.rmt [parameters]\n";
    print STDERR "parameters:\n";
    print STDERR "src=source address\n";
    print STDERR "dst=destination address\n";
    print STDERR "upperspec={any|tcp|udp} (default:any)\n";
    print STDERR "direction={in|out}\n";
    print STDERR "protocol={ah|esp|ah-esp}\n";
    print STDERR "mode={transport|tunnel}\n";
    print STDERR "policy={ipsec|none|discard} (default:ipsec)\n";
    print STDERR "tsrc=tunnel entry address\n";
    print STDERR "tdst=tunnel exit address\n";
}

########################################################################
