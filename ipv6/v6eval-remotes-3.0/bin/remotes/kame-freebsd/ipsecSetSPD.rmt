#!/usr/bin/perl
#
# Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004, 2005 Yokogawa Electric Corporation,
# YDC Corporation, IPA (Information-technology Promotion Agency, Japan).
# All rights reserved.
# 
# Redistribution and use of this software in source and binary forms, with 
# or without modification, are permitted provided that the following 
# conditions and disclaimer are agreed and accepted by the user:
# 
# 1. Redistributions of source code must retain the above copyright 
# notice, this list of conditions and the following disclaimer.
# 
# 2. Redistributions in binary form must reproduce the above copyright 
# notice, this list of conditions and the following disclaimer in the 
# documentation and/or other materials provided with the distribution.
# 
# 3. Neither the names of the copyrighters, the name of the project which 
# is related to this software (hereinafter referred to as "project") nor 
# the names of the contributors may be used to endorse or promote products 
# derived from this software without specific prior written permission.
# 
# 4. No merchantable use may be permitted without prior written 
# notification to the copyrighters. However, using this software for the 
# purpose of testing or evaluating any products including merchantable 
# products may be permitted without any notification to the copyrighters.
# 
# 
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHTERS, THE PROJECT AND 
# CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING 
# BUT NOT LIMITED THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS 
# FOR A PARTICULAR PURPOSE, ARE DISCLAIMED.  IN NO EVENT SHALL THE 
# COPYRIGHTERS, THE PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR 
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) 
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN 
# CONTRACT,STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF 
# THE POSSIBILITY OF SUCH DAMAGE.
#
# $TAHI: v6eval/bin/remotes/kame-freebsd/ipsecSetSPD.rmt,v 1.13 2005/05/09 09:35:22 akisada Exp $
#
########################################################################
use V6evalRemote;

rOpen() || goto error;

# set default values

$rOpt_timeout=10 if ! defined($rOpt_timeout);

$rOpt_upperspec = "any" if ! defined($rOpt_upperspec);

$rOpt_policy = "ipsec" if ! defined($rOpt_policy);

$rOpt_level = "require" if ! defined($rOpt_level);

if (defined($rOpt_sport) && !defined($rOpt_dport)) {
	$rOpt_sport = "[$rOpt_sport]";
	$rOpt_dport = "[any]";
}
elsif (!defined($rOpt_sport) && defined($rOpt_dport)) {
	$rOpt_sport = "[any]";
	$rOpt_dport = "[$rOpt_dport]";
}
elsif (defined($rOpt_sport) && defined($rOpt_dport)) {
	$rOpt_sport = "[$rOpt_sport]";
	$rOpt_dport = "[$rOpt_dport]";
}

# check parameters

if ($rOpt_policy ne "nopolicy") {
    if (!defined($rOpt_src) || !defined($rOpt_dst)){
        print STDERR "src,dst is required\n";
        usage();
        goto error;
    }
}

if ($rOpt_policy !~ /ipsec|none|discard|nopolicy/) {
    print STDERR "policy must be one of ipsec|none|discard\n";
    usage();
    goto error;
}
if ($rOpt_policy eq "ipsec") {
    if ($rOpt_mode !~ /transport|tunnel/) {
	if($rOpt_mode eq 'Transport'){
		$rOpt_mode = 'transport';
	}
	elsif($rOpt_mode eq 'Tunnel'){
		$rOpt_mode = 'tunnel';
	}
	else{
		print STDERR "mode must be one of transport|tunnel\n";
		usage();
		goto error;
	}
    }
    if ($rOpt_protocol !~ /ah|esp|ah-esp|esp-auth|ipcomp/) {
	if($rOpt_protocol eq 'PROTO_IPSEC_AH'){
		$rOpt_protocol = 'ah';
	}
	elsif($rOpt_protocol eq 'PROTO_IPSEC_ESP'){
		$rOpt_protocol = 'esp';
	}
	elsif($rOpt_protocol eq 'PROTO_IPCOMP'){
		$rOpt_protocol = 'ipcomp';
	}
	elsif($rOpt_protocol eq 'IPSEC_SA_BUNDLE'){
		$rOpt_protocol = 'ah-esp';
	}
	else{
		print STDERR "protocol must be one of ah|esp|ah-esp|esp-auth|ipcomp\n";
		usage();
		goto error;
	}
    }
    if ($rOpt_upperspec !~ /any|tcp|udp|ipv6-icmp|icmp|135/) {
	print STDERR "upperspec must be one of any|tcp|udp|ipv6-icmp|icmp|135\n";
	usage();
	goto error;
    }
    if ($rOpt_direction !~ /in|out/) {
	print STDERR "direction must be one of in|out\n";
	usage();
	goto error;
    }
    if ($rOpt_level !~ /use|require|unique/) {
	print STDERR "level must be one of use|require|unique\n";
	usage();
	goto error;
    }
    if ($rOpt_mode eq "transport") {
	if ($rOpt_tsrc ne undef && $rOpt_tdst ne undef) {
	    print STDERR "tsrc,tdst is defined in transport mode\n";
	    usage();
	    goto error;
	}
    }
    if ($rOpt_mode eq "tunnel") {
	if ($rOpt_tsrc eq undef || $rOpt_tdst eq undef) {
	    print STDERR "tsrc,tdst is required in tunnel mode\n";
	    usage();
	    goto error;
	}
    }
    if (($rOpt_level eq 'unique') && (!defined($rOpt_unique))) {
	print STDERR "unique ID is required.\n";
	usage();
	goto error;
    }
}

#----------------------------------------------------------------------
#$cmd = "/bin/cat >> /tmp/ipsec.conf\r";
#$cmd .= "\r";

$cmd = "/usr/local/v6/sbin/setkey -c \<\<EOD\r";

if ($rOpt_policy ne "nopolicy") {
    $cmd .= 
        "spdadd $rOpt_src$rOpt_sport $rOpt_dst$rOpt_dport\r" .
        "       $rOpt_upperspec\r" .
        "       -P $rOpt_direction ";
}

if ($rOpt_policy eq "ipsec") {
    if ($rOpt_mode eq 'transport') {
	$src2dst = "$rOpt_src-$rOpt_dst";
    }
    if ($rOpt_mode eq 'tunnel') {
	$src2dst = "$rOpt_tsrc-$rOpt_tdst";
    }
    $cmd .=
	"ipsec\r";

    if ($rOpt_protocol eq "ah") {
	if(defined($rOpt_unique) && ($rOpt_level eq 'unique')) {
		if(defined($rOpt_ommit) && ($rOpt_mode eq 'transport')) {
			$cmd .= 
			    "       ah/$rOpt_mode//$rOpt_level:$rOpt_unique\r" .
			    ";\r" ;
		} else {
			$cmd .= 
			    "       ah/$rOpt_mode/$src2dst/$rOpt_level:$rOpt_unique\r" .
			    ";\r" ;
		}
	} else {
		if(defined($rOpt_ommit) && ($rOpt_mode eq 'transport')) {
			$cmd .= 
			    "       ah/$rOpt_mode//$rOpt_level\r" .
			    ";\r" ;
		} else {
			$cmd .= 
			    "       ah/$rOpt_mode/$src2dst/$rOpt_level\r" .
			    ";\r" ;
		}
	}
    }
    elsif ($rOpt_protocol eq "esp") {
	if(defined($rOpt_unique) && ($rOpt_level eq 'unique')) {
		if(defined($rOpt_ommit) && ($rOpt_mode eq 'transport')) {
			$cmd .= 
			    "       esp/$rOpt_mode//$rOpt_level:$rOpt_unique\r" .
			    ";\r" ;
		} else {
			$cmd .= 
			    "       esp/$rOpt_mode/$src2dst/$rOpt_level:$rOpt_unique\r" .
			    ";\r" ;
		}
	} else {
		if(defined($rOpt_ommit) && ($rOpt_mode eq 'transport')) {
			$cmd .= 
			    "       esp/$rOpt_mode//$rOpt_level\r" .
			    ";\r" ;
		} else {
			$cmd .= 
			    "       esp/$rOpt_mode/$src2dst/$rOpt_level\r" .
			    ";\r" ;
		}
	}
    }
    elsif ($rOpt_protocol eq "esp-auth") {
	if(defined($rOpt_unique) && ($rOpt_level eq 'unique')) {
		if(defined($rOpt_ommit) && ($rOpt_mode eq 'transport')) {
			$cmd .= 
			    "       esp/$rOpt_mode//$rOpt_level:$rOpt_unique\r" .
			    ";\r" ;
		} else {
			$cmd .= 
			    "       esp/$rOpt_mode/$src2dst/$rOpt_level:$rOpt_unique\r" .
			    ";\r" ;
		}
	} else {
		if(defined($rOpt_ommit) && ($rOpt_mode eq 'transport')) {
			$cmd .= 
			    "       esp/$rOpt_mode//$rOpt_level\r" .
			    ";\r" ;
		} else {
			$cmd .= 
			    "       esp/$rOpt_mode/$src2dst/$rOpt_level\r" .
			    ";\r" ;
		}
	}
    }
    elsif ($rOpt_protocol eq "ah-esp") {
	if(defined($rOpt_unique) && ($rOpt_level eq 'unique')) {
		if(defined($rOpt_ommit) && ($rOpt_mode eq 'transport')) {
			$cmd .= 
			    "       esp/$rOpt_mode//$rOpt_level:$rOpt_unique\r" .
			    "       ah/$rOpt_mode//$rOpt_level:$rOpt_unique\r" .
			    ";\r" ;
		} else {
			$cmd .= 
			    "       esp/$rOpt_mode/$src2dst/$rOpt_level:$rOpt_unique\r" .
			    "       ah/$rOpt_mode/$src2dst/$rOpt_level:$rOpt_unique\r" .
			    ";\r" ;
		}
	} else {
		if(defined($rOpt_ommit) && ($rOpt_mode eq 'transport')) {
			$cmd .= 
			    "       esp/$rOpt_mode//$rOpt_level\r" .
			    "       ah/$rOpt_mode//$rOpt_level\r" .
			    ";\r" ;
		} else {
			$cmd .= 
			    "       esp/$rOpt_mode/$src2dst/$rOpt_level\r" .
			    "       ah/$rOpt_mode/$src2dst/$rOpt_level\r" .
			    ";\r" ;
		}
	}
    }
    elsif ($rOpt_protocol eq "ipcomp") {
	if(defined($rOpt_unique) && ($rOpt_level eq 'unique')) {
		if(defined($rOpt_ommit) && ($rOpt_mode eq 'transport')) {
			$cmd .= 
			    "       ipcomp/$rOpt_mode//$rOpt_level:$rOpt_unique\r" .
			    ";\r" ;
		} else {
			$cmd .= 
			    "       ipcomp/$rOpt_mode/$src2dst/$rOpt_level:$rOpt_unique\r" .
			    ";\r" ;
		}
	} else {
		if(defined($rOpt_ommit) && ($rOpt_mode eq 'transport')) {
			$cmd .= 
			    "       ipcomp/$rOpt_mode//$rOpt_level\r" .
			    ";\r" ;
		} else {
			$cmd .= 
			    "       ipcomp/$rOpt_mode/$src2dst/$rOpt_level\r" .
			    ";\r" ;
		}
	}
    }
}
if ($rOpt_policy eq "none") {
    $cmd .= 
	"none\r" .
	";\r" ;
}
if ($rOpt_policy eq "discard") {
    $cmd .= 
	"discard\r" .
	";\r" ;
}

unless(defined($rOpt_nodump)) {
$cmd .= "spddump;\r" ;
}
$cmd .= "EOD\r" ;

#$setkey = "/usr/local/v6/sbin/setkey -f /tmp/ipsec.conf\r";

rLogin($rOpt_timeout) || goto error;
rCommand($cmd , $rOpt_timeout) || goto error;
#rCommand($setkey , $rOpt_timeout) || goto error;
rLogout($rOpt_timeout) || goto error;

rClose();
exit($V6evalRemote::exitPass);

error:
    rClose();
    exit($V6evalRemote::exitFail);

########################################################################
sub usage()
{
    print STDERR "ipsecSetSPD.rmt [parameters]\n";
    print STDERR "parameters:\n";
    print STDERR "src=source address\n";
    print STDERR "dst=destination address\n";
    print STDERR "sport=source port (default:any)\n";
    print STDERR "dport=destination port (default:any)\n";
    print STDERR "upperspec={any|tcp|udp|ipv6-icmp|icmp|135} (default:any)\n";
    print STDERR "direction={in|out}\n";
    print STDERR "protocol={ah|esp|ah-esp|esp-auth}\n";
    print STDERR "mode={transport|tunnel}\n";
    print STDERR "policy={ipsec|none|discard} (default:ipsec)\n";
    print STDERR "tsrc=tunnel entry address\n";
    print STDERR "tdst=tunnel exit address\n";
    print STDERR "unique=unique ID for mapping particular SA with SP\n";
}

########################################################################
