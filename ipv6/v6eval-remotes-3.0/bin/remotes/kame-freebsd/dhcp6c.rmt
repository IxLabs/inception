#!/usr/bin/perl
#
# Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004, 2005 Yokogawa Electric Corporation,
# YDC Corporation, IPA (Information-technology Promotion Agency, Japan).
# All rights reserved.
# 
# Redistribution and use of this software in source and binary forms, with 
# or without modification, are permitted provided that the following 
# conditions and disclaimer are agreed and accepted by the user:
# 
# 1. Redistributions of source code must retain the above copyright 
# notice, this list of conditions and the following disclaimer.
# 
# 2. Redistributions in binary form must reproduce the above copyright 
# notice, this list of conditions and the following disclaimer in the 
# documentation and/or other materials provided with the distribution.
# 
# 3. Neither the names of the copyrighters, the name of the project which 
# is related to this software (hereinafter referred to as "project") nor 
# the names of the contributors may be used to endorse or promote products 
# derived from this software without specific prior written permission.
# 
# 4. No merchantable use may be permitted without prior written 
# notification to the copyrighters. However, using this software for the 
# purpose of testing or evaluating any products including merchantable 
# products may be permitted without any notification to the copyrighters.
# 
# 
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHTERS, THE PROJECT AND 
# CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING 
# BUT NOT LIMITED THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS 
# FOR A PARTICULAR PURPOSE, ARE DISCLAIMED.  IN NO EVENT SHALL THE 
# COPYRIGHTERS, THE PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR 
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) 
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN 
# CONTRACT,STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF 
# THE POSSIBILITY OF SUCH DAMAGE.
#
# $TAHI: v6eval/bin/remotes/kame-freebsd/dhcp6c.rmt,v 1.5 2003/03/11 07:22:38 akisada Exp $
#
########################################################################
use V6evalRemote;

rOpen() || goto error;
$system=rType();

#
$type=$V6evalTool::NutDef{Type};
if($type eq router) {
    if($rOpt_Start && !$rOpt_link0 && !$rOpt_link1) {
        print STDERR "Specify link0=XXX and/or link1=XXX\n";
        goto error;
    }
}
else{
    if($rOpt_Start && !$rOpt_link0) {
        print STDERR "Specify link0=XXX\n";
        goto error;
    }
}
#
$rOpt_timeout=5
    if ! defined($rOpt_timeout);

##Delayed Authentication
goto notsupported
    if defined($rOpt_delay_auth);
##Reconfigure Key Authentication
goto notsupported
    if defined($rOpt_key_auth);

#Included option
##Rapid Commit option 
if (defined($rOpt_rapidcommit)){
   $rOpt_rapidcommit="send\ rapid-commit";
}
else{
   $rOpt_rapidcommit="\#";
}

##IA_PD option
##IAID
if (defined($rOpt_iaid)){
   $rOpt_iaid="send\ ia-pd\ $rOpt_iaid";
}
else{
   $rOpt_iaid="\#";
}

#Option Request option
##ex. Domain Name Server option
if (defined($rOpt_requestoptions)){
   $rOpt_requestoptions="request\ $rOpt_requestoptions";
}
else{
   $rOpt_requestoptions="\#";
}

#Msg type
#INFORMATION-REQUEST
if (defined($rOpt_inforeq)){
   $rOpt_inforeq="information-only";
}
else{
   $rOpt_inforeq="\#";
}

#
$rOpt_slaid=1
    if ! defined($rOpt_slaid);
$rOpt_slalen=16
    if ! defined($rOpt_slalen);
#
$dhcp6c_tmpl="$system".".dhcp6c.tmpl";
$dhcp6c_conf="$system".".dhcp6c.conf";
$dhcp6c_rmt="/tmp/dhcp6c.conf";
$put_timeout=180;
#
if ($V6evalRemote::debug){
    $dhcp6c_cmd="/usr/local/v6/sbin/dhcp6c -D -c";
}
else{
    $dhcp6c_cmd="/usr/local/v6/sbin/dhcp6c -c";
}
#
$ifconfig_cmd="/usr/local/v6/sbin/ifconfig";

#
rLogin($rOpt_timeout) || goto error;
kame_dhcp6c() || goto error;
rLogout($rOpt_timeout) || goto error;

rClose();
exit($V6evalRemote::exitPass);

error:
    rClose();
    exit($V6evalRemote::exitFail);

notsupported:
    rClose();
    exit($V6evalRemote::exitNS);

########################################################################
sub kame_dhcp6c()
{
    if($rOpt_start) {
	kame_mkconf() || goto error;
	kame_start_dhcp6c() || goto error;
    } elsif($rOpt_set) {
	kame_mkconf() || goto error;
	kame_kill_dhcp6c() || goto error;
    } elsif($rOpt_stop) {
	kame_kill_dhcp6c() || goto error;
    } elsif($rOpt_release) {
	kame_release_dhcp6c() || goto error;
    } elsif($rOpt_Link) {
	kame_link_dhcp6c() || goto error;
    } else {
	print "Nothing happed. Please specify start/stop.\n";
    }
    return(1);

error:
    return(0);
}

#
sub kame_mkconf()
{
    print "Make dhcp6c.conf\n" if $V6evalRemote::debug;
    if(open(IN, "$dhcp6c_tmpl") == 0) {
	print STDERR "$dhcp6c_tmpl: $!\n";
	goto error;
    }
    if(open(OUT, "> $dhcp6c_conf") == 0) {
	print STDERR "$dhcp6c_conf: $!\n";
	goto error;
    }
    while(<IN>) {
	s/LINK0/$rOpt_link0/;
	s/LINK1/$rOpt_link1/;
	#
        s/RAPIDCOMMIT/$rOpt_rapidcommit/;
        s/IAID/$rOpt_iaid/;
        s/OPTREQOPT/$rOpt_requestoptions/;
        s/INFOREQ/$rOpt_inforeq/;
	#
	s/SLAID/sla-id $rOpt_slaid/;
	s/SLALEN/sla-len $rOpt_slalen/;
	#
	#
	print STDERR $_ if $V6evalRemote::debug;
	print OUT $_;
    }
    close(IN);
    close(OUT);

    print "Put local:$dhcp6c_conf to remote:$dhcp6_rmt\n"
	if $V6evalRemote::debug;
    rPutfile($dhcp6c_conf, $dhcp6c_rmt, $put_timeout) || goto error;
    return(1);

error:
    return(0);
}

sub kame_link_dhcp6c()
{
    #
    # up/down prefix delegation interface
    #
    if($rOpt_up) {
	rCommand("$ifconfig_cmd $rOpt_link0 up", $rOpt_timeout) || goto error;
    } else {
	rCommand("$ifconfig_cmd $rOpt_link0 down", $rOpt_timeout) || goto error;
    }
    #
    return(1);

error:
    return(0);
}

#
sub kame_kill_dhcp6c()
{
    my(@lines);
    my($pid)=0;

    rCommand("ps ax", $timeout) || goto error;
    @lines=rCmdOutput();
    shift(@lines); # remove command line
    pop(@lines);   # remove command prompt
    foreach(@lines) {
	if(/^\s*(\d+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+dhcp6c)/) {
	    #
	    # ps ax
	    # 300  p1  I+     0:00.14 /usr/local/v6/sbin/dhcp6c -c dhcp6c.conf fxp0
	    #
	    $pid=$1;
	}
    }
    if($pid) {
	print "Kill current dhcp6c (pid=$pid)\n" if $V6evalRemote::debug;
	rCommand("kill $pid", $timeout) || goto error;
    }
    return(1);

error:
    return(0);
}

#
sub kame_release_dhcp6c()
{
    my(@lines);
    my($pid)=0;

    rCommand("ps ax", $timeout) || goto error;
    @lines=rCmdOutput();
    shift(@lines); # remove command line
    pop(@lines);   # remove command prompt
    foreach(@lines) {
	if(/^\s*(\d+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+dhcp6c)/) {
	    #
	    # ps ax
	    # 300  p1  I+     0:00.14 /usr/local/v6/sbin/dhcp6c -c dhcp6c.conf fxp0
	    #
	    $pid=$1;
	}
    }
    if($pid) {
	print "Kill SIGTERM current dhcp6c (pid=$pid)\n" if $V6evalRemote::debug;
	rCommand("kill -TERM $pid", $timeout) || goto error;
    }
    return(1);

error:
    return(0);
}

#
sub kame_start_dhcp6c()
{
    print "Start dhcp6c\n" if $V6evalRemote::debug;
    if(rCommand("$dhcp6c_cmd $dhcp6c_rmt ".
		"$rOpt_link0", $timeout) != 1) {
	return(0);
    }
    return(1);
}

########################################################################
